{"version":3,"sources":["components/Header.js","components/Pixel.js","components/PixelRow.js","components/PixelGrid.js","components/PixelInfo.js","utils/shoppingCart.js","components/PixelInfoEditable.js","components/ShoppingCart.js","images/shopping-cart.svg","components/ShoppingCartIndicator.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","header","text","className","href","target","rel","Pixel","pixelData","activePixel","setActivePixelFunction","pixelSize","useState","color","borderColor","setBorderColor","isActive","x","y","console","log","style","backgroundColor","width","height","padding","borderWidth","borderStyle","onClick","onMouseEnter","onMouseLeave","PixelRow","pixelRowData","map","pixel","PixelGrid","fullPixelData","row","loadStripe","get","JSON","parse","localStorage","getItem","localStorageCart","add","item","currentCartArray","some","i","setItem","stringify","empty","removeItem","PixelInfoEditable","claimPixelsFunction","addToCartFunction","setPixel","advancedColorPickerActive","setAdvancedColorPickerActive","amount","border","type","value","owner","onChange","event","onChangeComplete","hex","note","textAlign","ShoppingCart","contents","checkoutFunction","ShoppingCartIndicator","itemsInCart","id","src","cartImage","alt","Footer","title","stripePromise","BACKEND_URL","pixels","App","fetchedPixels","setFetchedPixels","setActivePixel","Set","cartContents","setCartContents","useEffect","axios","then","response","data","catch","error","length","a","stripe","requestOptions","method","headers","body","fetch","json","session","redirectToCheckout","sessionId","result","message","display","flexFlow","justifyContent","newCart","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b65da3f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Header.css'\r\n\r\nconst Header = ({ header, text }) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>{ header }</h1>\r\n            <h2>{ text } (<a href=\"https://stripe.com/docs/testing#cards\" target=\"_blank\" rel=\"noreferrer\">more info</a>)</h2>\r\n        </div>\r\n    )\r\n}\r\n  \r\n\r\nexport default Header","import React, { useState } from 'react'\r\n\r\nconst Pixel = ({ pixelData, activePixel, setActivePixelFunction, pixelSize}) => {\r\n    const [ borderColor, setBorderColor ] = useState(pixelData.color)\r\n\r\n    const isActive = () => {\r\n        return (activePixel !== null && (pixelData.x === activePixel.x && pixelData.y === activePixel.y))\r\n            ? true\r\n            : false\r\n    }\r\n\r\n    if (isActive() && borderColor !== '#111') {\r\n        setBorderColor('#111')\r\n    } else {\r\n        //setBorderColor(pixelData.color)\r\n    }\r\n\r\n    if (!isActive() && borderColor === '#111') {\r\n        setBorderColor(pixelData.color)\r\n    }\r\n\r\n    if (pixelData.x === 0 && pixelData.y === 0){\r\n        console.log('isActive', isActive())\r\n    }\r\n    //console.log('pixel borderColor', borderColor)\r\n    return (\r\n        <td \r\n            className=\"pixel\" \r\n            style={{ \r\n                backgroundColor: pixelData.color,\r\n                width: pixelSize,\r\n                height: pixelSize,\r\n                padding: 0,\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: borderColor,\r\n                //borderSpacing: 0,\r\n                }}\r\n            onClick={ () => setActivePixelFunction(pixelData) }\r\n            onMouseEnter={ () => {\r\n                if (!isActive()){ setBorderColor('black') }\r\n            }}\r\n            onMouseLeave={ () => { \r\n                if(!isActive()){ setBorderColor(pixelData.color) }\r\n            }}\r\n            >\r\n    \r\n        </td>\r\n    )\r\n}\r\n  \r\n\r\nexport default Pixel","import React from 'react'\r\nimport Pixel from './Pixel'\r\n\r\nconst PixelRow = ({ \r\n    pixelRowData, \r\n    activePixel,\r\n    setActivePixelFunction, \r\n    pixelSize \r\n}) => {\r\n    return (\r\n        <tr className=\"pixelRow\">\r\n            { pixelRowData.map(pixel => <Pixel \r\n                                            key={ pixel.x } \r\n                                            pixelData={ pixel }\r\n                                            activePixel={ activePixel }\r\n                                            setActivePixelFunction={ setActivePixelFunction }\r\n                                            pixelSize={ pixelSize }\r\n                                            />) }\r\n        </tr>\r\n    )\r\n}\r\n  \r\n\r\nexport default PixelRow","import React from 'react'\r\nimport PixelRow from './PixelRow'\r\n\r\nimport './PixelGrid.css'\r\n\r\nconst PixelGrid = ({ \r\n    fullPixelData, \r\n    activePixel,\r\n    setActivePixelFunction, \r\n    pixelSize \r\n}) => {\r\n    console.log('in PixelGrid')\r\n    // console.log(`type of setActivePixelFunction: ${typeof(setActivePixelFunction)}`)\r\n    return (\r\n        <table \r\n            className=\"pixelGrid\"\r\n            >\r\n            <tbody>\r\n                { fullPixelData.map(row => <PixelRow \r\n                                            key={ row[0].y } \r\n                                            pixelRowData={ row }\r\n                                            activePixel={ activePixel }\r\n                                            setActivePixelFunction={ setActivePixelFunction } \r\n                                            pixelSize={ pixelSize }\r\n                                            /> \r\n                ) }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n  \r\n\r\nexport default PixelGrid","import React from 'react'\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\nconst stripePromise = loadStripe('pk_test_RMqvxnEUv0TbhaRCpLNpNzeF00G9e3C2JE');\r\n\r\n/*\r\nconst claimPixels = async (pixels) => {\r\n    // Get Stripe.js instance\r\n    const stripe = await stripePromise;\r\n\r\n    const requestOptions = { \r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(pixels),\r\n    }\r\n\r\n    // console.log(requestOptions);\r\n\r\n    // Call your backend to create the Checkout Session\r\n    const response = await fetch('http://localhost:4242/claim-pixel', requestOptions);\r\n\r\n    const session = await response.json();\r\n\r\n    // When the customer clicks on the button, redirect them to Checkout.\r\n    const result = await stripe.redirectToCheckout({\r\n      sessionId: session.id,\r\n    });\r\n\r\n    if (result.error) {\r\n      // If `redirectToCheckout` fails due to a browser or network\r\n      // error, display the localized error message to your customer\r\n      // using `result.error.message`.\r\n      console.log(result.error.message);\r\n    }\r\n}\r\n*/\r\nconst PixelInfo = ({ pixelData }) => {\r\n    if (pixelData && pixelData !== null) {\r\n        return (\r\n            <div className=\"pixelInfo\">\r\n                <h2>Claimed by</h2>\r\n                <h1>{ pixelData.owner }</h1>\r\n                <div style={{ \r\n                    backgroundColor: pixelData.color,\r\n                    width: '20px',\r\n                    height: '20px',\r\n                    }} />\r\n                <p>{ pixelData.note }</p>\r\n                <p>Claim amount: { pixelData.amount }</p>\r\n                {\r\n                    // <button onClick={ () => claimPixels([ { ...pixelData, amount: pixelData.amount + 0.05 } ]) }>Claim for { pixelData.amount + 0.05 }</button>\r\n                }\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"pixelInfo\">\r\n                <p>No pixel selected</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n  \r\n\r\nexport default PixelInfo","const add = (item) => {\r\n    console.log('adding to local storage cart', item)\r\n    const currentCartArray = get() || []\r\n\r\n    if (!currentCartArray.some(i => (i.x === item.x && i.y === item.y))){\r\n        console.log('cart doesn\\'t contain that, adding')\r\n        localStorage.setItem('cart', JSON.stringify([...currentCartArray, item]))\r\n    } else {\r\n        console.log('duplicate item, not adding')\r\n    }\r\n\r\n    console.log('local storage cart:')\r\n    console.log(get())\r\n}\r\n\r\nconst get = () => {\r\n    return JSON.parse(localStorage.getItem('cart'))\r\n}\r\n\r\nconst empty = () => {\r\n    localStorage.removeItem('cart')\r\n}\r\n\r\n\r\nconst localStorageCart =  { add, get, empty }\r\nexport default localStorageCart\r\n","import React, { useState } from 'react'\r\nimport { TwitterPicker, SketchPicker } from 'react-color'\r\n\r\nimport localStorageCart from '../utils/shoppingCart'\r\n\r\n\r\nconst PixelInfoEditable = ({ \r\n    pixelData, \r\n    claimPixelsFunction,\r\n    addToCartFunction\r\n }) => {\r\n    const [ pixel, setPixel ] = useState(null)\r\n    const [ advancedColorPickerActive, setAdvancedColorPickerActive ] = useState(false)\r\n\r\n    console.log('in PixelInfoEditable')\r\n    console.log('pixelData:', pixelData)\r\n    console.log('pixel:', pixel)\r\n\r\n    if (\r\n        (pixel === null && pixelData !== null) ||\r\n        (pixel !== null && pixel.x !== pixelData.x) ||\r\n        (pixel !== null && pixel.y !== pixelData.y)\r\n        ) {\r\n            setPixel({ ...pixelData, amount: pixelData.amount + 0.05 })\r\n        }\r\n\r\n\r\n    if (pixel && pixel !== null) {\r\n        return (\r\n            <div \r\n                className=\"pixelInfo\" \r\n                style={{ \r\n                    border: '1px solid black',\r\n                    width: '276px',\r\n                    }}\r\n                >\r\n                <h1>Pixel { pixel.x },{ pixel.y }</h1>\r\n                <label>\r\n                    Claimed by:\r\n                    <input \r\n                        type=\"text\"\r\n                        value={ pixel.owner }\r\n                        onChange={ (event) => setPixel({ ...pixel, owner: event.target.value }) }\r\n                        />\r\n                    <br />\r\n                </label>\r\n                <label>\r\n                    Color:\r\n                    <div style={{ \r\n                        backgroundColor: pixel.color,\r\n                        width: '100%',\r\n                        height: '50px',\r\n                        }} />\r\n                    { advancedColorPickerActive\r\n                        ? <SketchPicker\r\n                            color={pixel.color}\r\n                            width='250px'\r\n                            onChangeComplete={ (color, event) => setPixel({ ...pixel, color: color.hex })}\r\n                            />\r\n                        : <TwitterPicker \r\n                            color={pixel.color} \r\n                            onChange={ (color, event) => setPixel({ ...pixel, color: color.hex })}\r\n                            />\r\n                    }\r\n                    <button \r\n                        style={{ width: '100%' }}\r\n                        onClick={ () => setAdvancedColorPickerActive(!advancedColorPickerActive)}\r\n                        >\r\n                        { advancedColorPickerActive\r\n                            ? \"Basic...\"\r\n                            : \"Advanced...\"\r\n                        }\r\n                        </button>\r\n                    {/*\r\n                    <input \r\n                        type=\"text\"\r\n                        value={ pixel.color }\r\n                        onChange={ (event) => setPixel({ ...pixel, color: event.target.value }) }\r\n                        />\r\n                    */}\r\n                        \r\n                    <br />\r\n                </label>\r\n                <label>\r\n                    Note:\r\n                    <input \r\n                        type=\"text\"\r\n                        value={ pixel.note }\r\n                        onChange={ (event) => setPixel({ ...pixel, note: event.target.value }) }\r\n                        />\r\n                    <br />\r\n                </label>\r\n                <label>\r\n                    Claim amount:\r\n                    <input \r\n                        type=\"text\"\r\n                        value={ pixel.amount }\r\n                        style={{ \r\n                            width: '3em',\r\n                            textAlign: 'right',\r\n                            }}\r\n                        onChange={ (event) => setPixel({ ...pixel, amount: event.target.value }) }\r\n                        /> €\r\n                    <br />\r\n                </label>\r\n\r\n                <button onClick={ () => claimPixelsFunction([ pixel ]) }>Claim for { pixel.amount } €</button> \r\n                <button onClick={ () => addToCartFunction(pixel) }>Add to Cart</button> \r\n                \r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"pixelInfo\">\r\n                <p>No pixel selected</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n  \r\n\r\nexport default PixelInfoEditable","import React from 'react'\r\n\r\nimport './ShoppingCart.css'\r\n\r\nconst ShoppingCart = ({ contents, checkoutFunction }) => {\r\n    console.log('shopping cart - contents', contents)\r\n    return (\r\n        <div \r\n            className=\"shoppingCart\"\r\n            >\r\n            <h1>Cart</h1>\r\n            { contents.map( item => {\r\n                return (\r\n                    <div \r\n                        className=\"shoppingCartItem\"\r\n                        key={`${item.x}-${item.y}`}\r\n                        >\r\n                        <div>Pixel {item.x}, {item.y}</div>\r\n                        <div>Owner: {item.owner}</div>\r\n                        <div>Color: {item.color}</div>\r\n                        <div>Note: {item.note}</div>\r\n                        <div>Claim amount: {item.amount}</div>\r\n                    </div>\r\n                )\r\n            })}\r\n            <button onClick={ () => checkoutFunction(contents)}>Checkout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShoppingCart","export default __webpack_public_path__ + \"static/media/shopping-cart.f0432bbd.svg\";","import React from 'react'\r\n\r\nimport cartImage from '../images/shopping-cart.svg'\r\nimport './ShoppingCartIndicator.css'\r\n\r\nconst ShoppingCartIndicator = ({ itemsInCart }) => {\r\n    if (itemsInCart > 0) {\r\n        return (\r\n            <div id=\"shoppingCartIndicator\">\r\n                <img src={cartImage} id=\"shoppingCartIndicatorImage\" alt=\"Shopping Cart\"/>\r\n                <div id=\"shoppingCartIndicatorCount\">{ itemsInCart }</div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n  \r\n\r\nexport default ShoppingCartIndicator","import React from 'react'\r\n\r\nimport './Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            Copyright © Tomi Javanainen 2021. Shopping cart icon by <a href=\"https://www.freepik.com/\" target=\"_blank\" rel=\"noreferrer\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\" target=\"_blank\" rel=\"noreferrer\">www.flaticon.com</a>.\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import './App.css';\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Header from './components/Header'\r\nimport PixelGrid from './components/PixelGrid'\r\nimport PixelInfo from './components/PixelInfo'\r\nimport PixelInfoEditable from './components/PixelInfoEditable'\r\nimport SizeAdjuster from './components/SizeAdjuster'\r\nimport ShoppingCart from './components/ShoppingCart'\r\nimport ShoppingCartIndicator from './components/ShoppingCartIndicator'\r\nimport Footer from './components/Footer'\r\n\r\nimport localStorageCart from './utils/shoppingCart'\r\n\r\n\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\nconst stripePromise = loadStripe('pk_test_RMqvxnEUv0TbhaRCpLNpNzeF00G9e3C2JE');\r\n\r\nconst BACKEND_URL = 'http://pixels.rpghelpers.com:4242'\r\n\r\n\r\n/*\r\nconst emptyPixel = {\r\n  color: '#FFFFFF',\r\n  owner: 'not claimed',\r\n  note: '',\r\n  amount: 0.45,\r\n}\r\n\r\nlet pixels = [];\r\n\r\nfor (let row = 0; row < 100; row++) {\r\n  pixels.push([]);\r\n\r\n  for (let column = 0; column < 100; column++) {\r\n    pixels[row].push({\r\n      ...emptyPixel,\r\n      x: column,\r\n      y: row,\r\n      color: `#${ (row * column).toString(16)}`,\r\n    })\r\n  }\r\n}\r\n*/\r\nlet pixels = []\r\n\r\nfunction App() {\r\n  const [ fetchedPixels, setFetchedPixels ] = useState(null)\r\n  const [ activePixel, setActivePixel ] = useState(null)\r\n  const [ pixelSize, setPixelSize ] = useState(5)\r\n  const [ quickCheckout, setQuickCheckout ] = useState(null) // if this contains pixel data then quick checkout is active\r\n  const [ cartContents, setCartContents ] = useState(new Set(localStorageCart.get())) // \r\n\r\n  console.log('render')\r\n  // console.log('pixels', pixels)\r\n  // console.log('fetchedPixels', fetchedPixels)\r\n\r\n  useEffect(() => {\r\n    console.log('running effect')\r\n    // Load pixel data from backend\r\n    axios\r\n      .get(`${BACKEND_URL}/pixels`)\r\n      .then(response => {\r\n        //console.log('effect response', response.data)\r\n        setFetchedPixels(response.data)                \r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }, []\r\n  )\r\n\r\n  if (pixels.length === 0 && fetchedPixels !== null) { pixels = fetchedPixels }\r\n\r\n  const addToCart = ( item ) => {\r\n    const newCart = new Set(cartContents)\r\n    newCart.add(item)\r\n    setCartContents(newCart)\r\n    localStorageCart.add(item)\r\n  }\r\n\r\n  const emptyCart = () => {\r\n    setCartContents(new Set())\r\n    localStorageCart.empty()\r\n  }\r\n\r\n  const claimPixelsFunction = async (pixels) => {\r\n    // Get Stripe.js instance\r\n    const stripe = await stripePromise;\r\n\r\n    const requestOptions = { \r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(pixels)\r\n    }\r\n\r\n    // console.log(requestOptions);\r\n    // TODO: EMPTY CART ONLY WHEN RETURNING FROM SUCCESFUL CHECKOUT\r\n    emptyCart()\r\n\r\n    // Call your backend to create the Checkout Session\r\n    const response = await fetch(`${BACKEND_URL}/claim-pixels`, requestOptions);\r\n\r\n    const session = await response.json();\r\n\r\n    // When the customer clicks on the button, redirect them to Checkout.\r\n    const result = await stripe.redirectToCheckout({\r\n      sessionId: session.id,\r\n    });\r\n\r\n    if (result.error) {\r\n      // If `redirectToCheckout` fails due to a browser or network\r\n      // error, display the localized error message to your customer\r\n      // using `result.error.message`.\r\n      console.log(result.error.message);\r\n    }\r\n  }\r\n\r\n  if (fetchedPixels === null) {\r\n    return <h1>Loading...</h1>\r\n  } else {\r\n\r\n    return (\r\n      <div \r\n        className=\"content\"\r\n        style={{ \r\n          display: \"flex\",\r\n          flexFlow: \"row wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        >\r\n        <Header\r\n          header=\"TESTING MODE\"\r\n          text=\"Use card number 4242 4242 4242 4242 for purchases\"\r\n          />\r\n\r\n        { /*\r\n        <SizeAdjuster\r\n          pixelSize={ pixelSize }\r\n          setPixelSize={ setPixelSize }\r\n          />\r\n        */ }\r\n        <PixelGrid \r\n          fullPixelData={pixels} \r\n          activePixel={activePixel}\r\n          setActivePixelFunction={ setActivePixel } \r\n          pixelSize={ pixelSize }\r\n          style={{ border: '1px solid black' }}\r\n          />\r\n\r\n        <div>\r\n        <PixelInfoEditable \r\n          pixelData={ activePixel } \r\n          claimPixelsFunction={ claimPixelsFunction }\r\n          addToCartFunction={ addToCart }\r\n          />\r\n\r\n        <ShoppingCart\r\n          /* convert Set to array for component */\r\n          contents={ [...cartContents] } \r\n          checkoutFunction={ claimPixelsFunction }\r\n          />\r\n        </div>\r\n        <ShoppingCartIndicator itemsInCart={ cartContents.length } />\r\n\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}